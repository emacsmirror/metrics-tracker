[[https://melpa.org/#/metrics-tracker][file:https://melpa.org/packages/metrics-tracker-badge.svg]] [[https://www.gnu.org/licenses/gpl-3.0.txt][file:https://img.shields.io/badge/license-GPL_3-green.svg]]

* metrics tracker
** overview

   [[http://www.gnu.org/software/emacs/][emacs]] is a text editor.  an extensible one.  it is mainly used for
   coding, but it can also do anything else.  emacs includes a diary
   which you can use to keep track of which things you do on which
   days.

   [[https://github.com/ianxm/emacs-tracker][metrics-tracker.el]] gives emacs the capability to generate tables and charts
   from the personal metrics data found in your diary entries.

   using metrics-tracker.el, you can use your emacs diary to track daily
   personal metrics.  each metric is a count of something per day.  the
   point is to measure behaviors that you are trying to increase (like
   exercise) or decrease (like watching buffy the vampire slayer) so
   that you can see if you are making progress toward that goal.

   this is a port of [[https://github.com/ianxm/tracker][tracker]].

** installation

** melpa

   1. run @@html:<kbd>@@M-x@@html:</kbd>@@ ~package-install~ @@html:<kbd>@@RET@@html:</kbd>@@ ~metrics-tracker~

** manual install

   1. download [[https://raw.github.com/ianxm/emacs-tracker/master/metrics-tracker.el][metrics-tracker.el]]
   2. run @@html:<kbd>@@M-x@@html:</kbd>@@ ~package-install-file~ @@html:<kbd>@@RET@@html:</kbd>@@
   3. choose ~metrics-tracker.el~

** usage

*** entering metrics data

    metrics entries are regular diary entries so they can be created by
    updating the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Diary.html][emacs diary]] in the normal way, but diary entries that
    aren't in a certain format will be ignored by metrics-tracker.
    metric-tracker reads diary entries from the file pointed to by the
    ~diary-file~ variable.

    tip: consider using abbrev mode in diary mode and setting
    abbreviations for your metrics to save yourself a few keystrokes.

**** diary entry format

    emacs is very loose on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Format-of-Diary-File.html#Format-of-Diary-File][diary entry formatting]], but entries that
    metrics-tracker.el uses must look like:

#+BEGIN_SRC
    [date] [time] [metric-name] [value]
#+END_SRC

    where,
    - date :: the date of a particular day.  although the emacs diary
             allows dates like "wednesday," which applies to all
             wednesdays, metrics-tracker.el only uses dates for specific days.
             some examples of valid dates are:
      - ~2019-12-31~
      - ~31 Dec 2019~
      - ~December 31, 2019~
      - ~31/Dec/2019~
    - time :: the time of day is optional and ignored by
             metrics-tracker.el if it is provided.  if provided, it
             must be formatted as:
      - ~10:30~
      - ~10:30a~
      - ~10:30 a~
      - ~10:30:10 am~
    - metric-name :: is any string.  it can be as long as you like and
                     can include spaces but keeping them short helps
                     with readability.  valid values may look like:
      - ~pushups~
      - ~watched tv~
    - value :: is a number (integer or decimal).  metrics-tracker.el
               doesn't care about units.  ~value~ is just a number.  if
               you're tracking how much tv you watch, a "4" could mean
               4 shows or 4 hours; it's up to you.  do not include
               commas. valid values may be:
      - ~40~
      - ~1.2~

    here is an example diary file where all entries are valid metrics.
    there's no advantage to mixing date formats.  the example does it
    for demonstration purposes.

#+BEGIN_SRC
2019-12-29 beer 1
2019-12-31 coding emacs-tracker 1
2019-12-31 wine 2
2020-01-02 bike commute 11
January 1, 2020 7:10 pm beer 1
04/Jan/2020 coding emacs-scrum 2
4 Jan 2020 coding emacs-scrum 2
Jan 4, 2020 run time 18
Jan 4, 2020 run dist 2
04/Jan/2020 10:00pm beer 1
#+end_SRC

**** whitelist / blacklist

    by default metrics-tracker.el will pick up any diary entries that match
    the format it is looking for, which means it might pick up entries
    you don't want in your report.  if there are a few metrics that
    get picked up that you don't want to see, you can exclude them by
    adding them to ~metrics-tracker-metric-names-blacklist~.  this custom
    variable takes a list of metric names as a list of strings, such
    as:

#+BEGIN_SRC
   '("run time" "run dist")
#+end_SRC

    if metrics-tracker.el picks up lots of metrics that you don't want to see,
    you could instead whitelist the ones you want by adding them to
    the ~metrics-tracker-metric-names-whitelist~ custom variable.  this uses
    the same format as ~metrics-tracker-metric-names-blacklist~.  if you
    specify a whitelist, only those are considered and the blacklist
    is ignored.

*** reporting

    metrics-tracker.el provides the following ways to view the metrics data in
    your diary.

**** list all metrics

    @@html:<kbd>@@M-x@@html:</kbd>@@ ~metrics-tracker-list~

    this creates a table containing all of the metrics found in your
    emacs diary.

    the table can be sorted by any column by moving over the column
    and hitting ~S~.  the arrow in the header indicates the sort
    column and direction.

    the table contains the following columns:
    - metric :: the metric name
    - days ago :: the number of days since "last"
    - first :: the date of the first entry
    - last :: the date of the last entry
    - count :: the number of entries for this metric

    here's an example:

#+BEGIN_SRC
  metric         days ago ▼ first        last         count
  emacs-tracker  0          2019-11-23   2019-12-28   18
  beer           3          2012-02-13   2019-12-25   1349
  commute        64         2006-05-22   2019-10-25   1774
#+END_SRC

**** extract as a table

     @@html:<kbd>@@M-x@@html:</kbd>@@ ~metrics-tracker-table~

     emacs will prompt for the following input parameters:
    - metric-name :: the metric name
    - date-grouping :: how many days to clump in each row. one of:
      - day
      - week
      - month
      - year
      - full
    - value-transform :: how to transform the data. one of:
      - total :: sum all of the values in the bin
      - count :: count entries in the bin
      - percent :: percent of days within the ~date-grouping~ with an occurrence
      - per-day :: divide the bin total by the number of days in the bin
      - per-week :: divide the bin total by the number of weeks in the bin
      - per-month :: divide the bin total by the number of months in the bin
      - per-year :: divide the bin total by the number of years in the bin

    this creates a table containing the transformed data for the
    requested metric.

    the table can be sorted by either column by moving over the column
    and hitting ~S~.  the arrow in the header indicates the sort
    column and direction.

    here's an example, showing the percentage of days of each year
    drinking a beer:

#+BEGIN_SRC
  year ▼       beer percent
  2012         54.0
  2013         48.2
  2014         58.6
  2015         59.5
  2016         50.7
  2017         39.5
  2018         35.3
  2019         30.4
#+END_SRC

    if you want to view multiple metrics, pass an argument to the
    ~metrics-tracker-table~ command.

    @@html:<kbd>@@C-u@@html:</kbd>@@ @@html:<kbd>@@M-x@@html:</kbd>@@
    ~metrics-tracker-table~

    when an argument is given, emacs will prompt for metrics names
    until ~no more~ is given.  all selected metrics will be rendered
    in the same table.  all other options are the same as in the
    single metric case.

**** show calendar view

     @@html:<kbd>@@M-x@@html:</kbd>@@ ~metrics-tracker-cal~

    emacs can extract the data for a metric and render it onto a
    calendar.  the number at each calendar position is one of:
    - period :: no metric for the day
    - underscore :: before first metric occurrence or after current
                    date
    - number :: the value for the day

    emacs will prompt for the following input parameters:
    - metric-name :: the metric name
    - value-transform :: how to transform the data. one of:
      - total :: total for the day
      - count :: count entries for the day

    here's an example, showing hours of coding on this project

#+BEGIN_SRC
  emacs-tracker

                    Dec 2019

    Su    Mo    Tu    We    Th    Fr    Sa
       .     .     .     .     .     .     .
       3     .     6     .     4     2     .
       .     4     2     2     .     .     .
       1     1     .     1     .     .     4
       .     _     _

#+END_SRC

    ~metrics-tracker-cal~ only supports one metric at a time.

**** draw graphs

    metrics-tracker.el can take the same table data and use it to generate a
    graph.  it uses gnuplot for graph generation, so gnuplot must be
    installed on your system and available on your PATH.  I tested
    with gnuplot 5.0.

    @@html:<kbd>@@M-x@@html:</kbd>@@ ~metrics-tracker-graph~

    emacs will prompt for the same input parameters as in
    ~metrics-tracker-table~ above, as well as:
    - graph-type :: the type of graph to render. one of:
      - line
      - bar
      - scatter
    - graph-output :: display format for the graph. one of:
      - ascii
      - svg
      - png

    this is an example line graph rendered in ascii of average bike
    commute miles per week for each year:

#+BEGIN_SRC org-mode
:                                commute per week
:
:  45 +-+-++++-++++-++++-++++-++++-++++-++++-++++-++++-++++-++++-++++-+++++-+
:     +   +     +    +    +         +         +         +         +         +
:  40 +-++            +             +...                                  +-+
:     | +              +           .    .                                   |
:  35 +-+               +        ..      +                                +-+
:     |                  +      .         :                                 |
:  30 +-+                 +....+          :                               +-+
:     |                                    :           .+                   |
:     |                                     :        ..  :                  |
:  25 +-+                                    :    .+.     :               +-+
:     |                                      :  ..         :                |
:  20 +-+                                     +.           :              +-+
:     |                                                     :               |
:  15 +-+                                                    +....+....   +-+
:     +         +         +         +         +         +         +    +    +
:  10 +-+-++++-++++-++++-++++-++++-++++-++++-++++-++++-++++-++++-++++-+++++-+
:   2006      2008      2010      2012      2014      2016      2018      2020
:                                      year
#+END_SRC

    below is an example of the same data but this one shows the total
    for each week and renders it as a scatter plot written as a png
    image.

    [[https://ianxm-githubfiles.s3.amazonaws.com/emacs-tracker/commute_by_week.png]]

    the size of the image can be set by modifying the variable
    ~metrics-tracker-graph-size~.

    if you want to plot multiple metrics, pass an argument to the
    ~metrics-tracker-graph~ command.

    @@html:<kbd>@@C-u@@html:</kbd>@@ @@html:<kbd>@@M-x@@html:</kbd>@@
    ~metrics-tracker-graph~

    when an argument is given, emacs will prompt for metrics names
    until ~no more~ is given.  all selected metrics will be plotted on
    the same axis. all other plot options are the same as in the
    single metric case.

    this example shows the percentage of days I bike commuted versus
    ran by year:

    [[https://ianxm-githubfiles.s3.amazonaws.com/emacs-tracker/commute_run_by_year.png]]

    the colors used for each series in the graph can be customized
    using the ~metrics-tracker-graph-colors~ custom variable, which
    contains a list of colors specified as hex values.

** todo
   - reports
     - streaks
     - bursts
     - records
   - combine multiple metrics with formulas
   - dark mode for graphs
   - sync to cloud
   - quality checks
